// –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
const commentsState = {}; // { postId: [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏] }

document.addEventListener('DOMContentLoaded', function () {
    fetchPosts();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤
async function fetchPosts() {
    try {
        const token = localStorage.getItem('access_token');
        if (!token) {
            throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
        }

        const response = await fetch('http://127.0.0.1:8000/v1/posts/', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }

        const posts = await response.json();

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        const feedbackList = document.getElementById('feedback-list');
        feedbackList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        posts.forEach(postData => {
            const post = postData.Post;
            const postElement = createPostElement(post);
            feedbackList.appendChild(postElement);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
            fetchComments(post.id, postElement);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç–∑—ã–≤–∞
function createPostElement(post) {
    const postElement = document.createElement('div');
    postElement.classList.add('feedback-item', 'row', 'mb-4');
    postElement.dataset.postId = post.id; // –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ—Å—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ—Å—Ç–µ
    const imageHtml = post.image_data
        ? `<div class="col-12">
              <img src="http://127.0.0.1:8000/v1/posts/posts/${post.id}/image" alt="Post Image" class="img-fluid" loading="lazy" onerror="this.style.display='none'">
           </div>`
        : '';

    postElement.innerHTML = `
        <div class="col-12">
            <h3>${post.title}</h3>
            <p><strong>Type:</strong> ${post.type}</p>
            <p>${post.content}</p>
        </div>
        ${imageHtml}
        <div class="col-md-6 d-flex justify-content-start">
            <button class="vote-button btn btn-primary" onclick="vote(this, 'positive')">üëç <span class="vote-count">0</span></button>
            <button class="vote-button btn btn-danger ms-2" onclick="vote(this, 'negative')">üëé <span class="negative-count">0</span></button>
        </div>
        <div class="col-md-6 text-end">
            <button class="leave-comment-button btn btn-info" onclick="toggleCommentForm(this)">Leave a Comment</button>
        </div>
        <!-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ -->
        <div class="comment-section">
            <h4>Comments:</h4>
            <div class="comment-content"></div>
            <span>Show Comments</span>
        </div>
        <div class="comment-form" style="display: none;">
            <input type="text" placeholder="Your Name" required>
            <textarea rows="2" placeholder="Your comment..." required></textarea>
            <button onclick="addComment(this)">Add Comment</button>
        </div>
    `;
    return postElement;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
async function fetchComments(postId, feedbackItem) {
    try {
        const token = localStorage.getItem('access_token');
        if (!token) {
            throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
        }

        const response = await fetch(`http://127.0.0.1:8000/v1/posts/${postId}/comments`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }

        const comments = await response.json();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        commentsState[postId] = comments;

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        renderComments(postId, feedbackItem);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function renderComments(postId, feedbackItem) {
    const commentContent = feedbackItem.querySelector('.comment-content');
    commentContent.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const comments = commentsState[postId] || [];

    comments.forEach(comment => {
        const commentElement = document.createElement('div');
        commentElement.classList.add('comment');
        commentElement.dataset.commentId = comment.id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º comment_id
        commentElement.innerHTML = `
            <strong>${comment.user_id}</strong>: ${comment.content}
            <div class="comment-actions">
                <button class="delete-btn" onclick="deleteComment(this)">Delete</button>
            </div>
        `;
        commentContent.appendChild(commentElement);
    });
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async function deleteComment(button) {
    const isConfirmed = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?');
    if (!isConfirmed) {
        return; // –û—Ç–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
    }

    const comment = button.closest('.comment');
    const feedbackItem = button.closest('.feedback-item');
    const postId = feedbackItem.dataset.postId; // –ü–æ–ª—É—á–∞–µ–º post_id
    const commentId = comment.dataset.commentId; // –ü–æ–ª—É—á–∞–µ–º comment_id

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ post_id –∏ comment_id —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!postId || !commentId) {
        console.error('post_id –∏–ª–∏ comment_id –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        alert('–û—à–∏–±–∫–∞: post_id –∏–ª–∏ comment_id –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    try {
        const token = localStorage.getItem('access_token');
        if (!token) {
            throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        const response = await fetch(`http://127.0.0.1:8000/v1/posts/${postId}/comments?comment_id=${commentId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }

        // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        commentsState[postId] = commentsState[postId].filter(c => c.id !== parseInt(commentId));

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        renderComments(postId, feedbackItem);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
}

// –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
async function addComment(button) {
    const feedbackItem = button.closest('.feedback-item');
    const name = feedbackItem.querySelector('.comment-form input').value;
    const commentText = feedbackItem.querySelector('.comment-form textarea').value;

    if (name && commentText) {
        try {
            const token = localStorage.getItem('access_token');
            if (!token) {
                throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            button.disabled = true;
            button.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';

            const postId = feedbackItem.dataset.postId;
            const response = await fetch(`http://127.0.0.1:8000/v1/posts/${postId}/comments`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    content: commentText
                })
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            }

            const newComment = await response.json();

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (!commentsState[postId]) {
                commentsState[postId] = [];
            }
            commentsState[postId].push(newComment);

            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            renderComments(postId, feedbackItem);

            // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
            feedbackItem.querySelector('.comment-form input').value = '';
            feedbackItem.querySelector('.comment-form textarea').value = '';
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            button.disabled = false;
            button.textContent = 'Add Comment';
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function toggleCommentForm(button) {
    const form = button.closest('.feedback-item').querySelector('.comment-form');
    form.style.display = form.style.display === 'block' ? 'none' : 'block';
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function editComment(button) {
    const comment = button.closest('.comment');
    const commentText = comment.querySelector('strong').nextSibling.textContent.trim();
    const feedbackItem = button.closest('.feedback-item');

    const form = feedbackItem.querySelector('.comment-form');
    form.querySelector('textarea').value = commentText;

    // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    comment.remove();

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    form.querySelector('button').textContent = 'Save Changes';
}

// –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
async function vote(button, type) {
    const feedbackItem = button.closest('.feedback-item');
    const voteCountElement = feedbackItem.querySelector('.vote-count');
    const negativeCountElement = feedbackItem.querySelector('.negative-count');
    const positiveButton = feedbackItem.querySelector('.btn-primary');
    const negativeButton = feedbackItem.querySelector('.btn-danger');

    try {
        const token = localStorage.getItem('access_token');
        if (!token) {
            throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º direction: 1 –¥–ª—è "positive", -1 –¥–ª—è "negative"
        const direction = type === 'positive' ? 1 : -1;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –≥–æ–ª–æ—Å
        const hasVotedPositive = positiveButton.classList.contains('voted');
        const hasVotedNegative = negativeButton.classList.contains('voted');

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É, –æ—Ç–º–µ–Ω—è–µ–º –≥–æ–ª–æ—Å
        if ((type === 'positive' && hasVotedPositive) || (type === 'negative' && hasVotedNegative)) {
            direction = 0; // –û—Ç–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞
        }

        const response = await fetch('http://127.0.0.1:8000/v1/vote/', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                post_id: parseInt(feedbackItem.dataset.postId), // ID –ø–æ—Å—Ç–∞
                direction: direction // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞
            })
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }

        const result = await response.json();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
        if (result.positive_votes !== undefined && result.negative_votes !== undefined) {
            voteCountElement.textContent = result.positive_votes;
            negativeCountElement.textContent = result.negative_votes;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
        if (type === 'positive') {
            positiveButton.classList.toggle('voted');
            positiveButton.style.backgroundColor = positiveButton.classList.contains('voted') ? '#b6d7a8' : '';
            positiveButton.style.color = positiveButton.classList.contains('voted') ? 'white' : '';

            // –ï—Å–ª–∏ –≥–æ–ª–æ—Å—É–µ–º "–∑–∞", —Å–Ω–∏–º–∞–µ–º –≥–æ–ª–æ—Å "–ø—Ä–æ—Ç–∏–≤"
            if (direction === 1 && negativeButton.classList.contains('voted')) {
                negativeButton.classList.remove('voted');
                negativeButton.style.backgroundColor = '';
                negativeButton.style.color = '';
            }
        } else {
            negativeButton.classList.toggle('voted');
            negativeButton.style.backgroundColor = negativeButton.classList.contains('voted') ? '#ead1dc' : '';
            negativeButton.style.color = negativeButton.classList.contains('voted') ? 'white' : '';

            // –ï—Å–ª–∏ –≥–æ–ª–æ—Å—É–µ–º "–ø—Ä–æ—Ç–∏–≤", —Å–Ω–∏–º–∞–µ–º –≥–æ–ª–æ—Å "–∑–∞"
            if (direction === -1 && positiveButton.classList.contains('voted')) {
                positiveButton.classList.remove('voted');
                positiveButton.style.backgroundColor = '';
                positiveButton.style.color = '';
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
}